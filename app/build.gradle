plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}

repositories {
    google()
    jcenter()
    mavenCentral()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId 'com.cmota.commit19'
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    packagingOptions {
        // Ktor prevents the build otherwise
        exclude 'META-INF/*.kotlin_module'
    }

    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/java']
            res.srcDirs = ['src/androidMain/res']
        }
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation "com.github.bumptech.glide:glide:4.9.0"

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {
    android("android")

    iosX64("ios") {
        compilations.main.outputKinds("framework")
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "io.ktor:ktor-client-core:${ktor_version}"
                implementation "io.ktor:ktor-client-serialization:${ktor_version}"
                
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${coroutines_version}"
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        androidMain {
            dependencies {
                implementation "io.ktor:ktor-client-android:${ktor_version}"
                implementation "io.ktor:ktor-client-serialization-jvm:${ktor_version}"
                implementation "io.ktor:ktor-client-okhttp:${ktor_version}"
                implementation "com.squareup.okhttp3:logging-interceptor:3.14.1"
                
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutines_version}"
            }
        }

        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }

        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-ios:${ktor_version}"
                implementation "io.ktor:ktor-client-serialization-iosx64:${ktor_version}"
                
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${coroutines_version}"
            }
        }

        iosTest {
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".compilations.main.linkTaskName('FRAMEWORK', buildType)
}